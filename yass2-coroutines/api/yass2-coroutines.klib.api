// Klib ABI Dump
// Targets: [linuxArm64, linuxX64, macosArm64, wasmJs]
// Rendering settings:
// - Signature version: 2
// - Show manifest properties: true
// - Show declarations: true

// Library unique name: <ch.softappeal.yass2:yass2-coroutines>
open annotation class ch.softappeal.yass2.remote.coroutines/MustBeImplementedByAcceptor : kotlin/Annotation { // ch.softappeal.yass2.remote.coroutines/MustBeImplementedByAcceptor|null[0]
    constructor <init>() // ch.softappeal.yass2.remote.coroutines/MustBeImplementedByAcceptor.<init>|<init>(){}[0]
}

open annotation class ch.softappeal.yass2.remote.coroutines/MustBeImplementedByInitiator : kotlin/Annotation { // ch.softappeal.yass2.remote.coroutines/MustBeImplementedByInitiator|null[0]
    constructor <init>() // ch.softappeal.yass2.remote.coroutines/MustBeImplementedByInitiator.<init>|<init>(){}[0]
}

abstract interface ch.softappeal.yass2.remote.coroutines/Connection { // ch.softappeal.yass2.remote.coroutines/Connection|null[0]
    abstract suspend fun closed() // ch.softappeal.yass2.remote.coroutines/Connection.closed|closed(){}[0]
    abstract suspend fun write(ch.softappeal.yass2.remote.coroutines/Packet?) // ch.softappeal.yass2.remote.coroutines/Connection.write|write(ch.softappeal.yass2.remote.coroutines.Packet?){}[0]
}

abstract class <#A: ch.softappeal.yass2.remote.coroutines/Connection> ch.softappeal.yass2.remote.coroutines/Session { // ch.softappeal.yass2.remote.coroutines/Session|null[0]
    constructor <init>() // ch.softappeal.yass2.remote.coroutines/Session.<init>|<init>(){}[0]

    final val clientTunnel // ch.softappeal.yass2.remote.coroutines/Session.clientTunnel|{}clientTunnel[0]
        final fun <get-clientTunnel>(): kotlin.coroutines/SuspendFunction1<ch.softappeal.yass2.remote/Request, ch.softappeal.yass2.remote/Reply> // ch.softappeal.yass2.remote.coroutines/Session.clientTunnel.<get-clientTunnel>|<get-clientTunnel>(){}[0]
    final val connection // ch.softappeal.yass2.remote.coroutines/Session.connection|{}connection[0]
        final fun <get-connection>(): #A // ch.softappeal.yass2.remote.coroutines/Session.connection.<get-connection>|<get-connection>(){}[0]
    open val serverTunnel // ch.softappeal.yass2.remote.coroutines/Session.serverTunnel|{}serverTunnel[0]
        open fun <get-serverTunnel>(): kotlin.coroutines/SuspendFunction1<ch.softappeal.yass2.remote/Request, ch.softappeal.yass2.remote/Reply> // ch.softappeal.yass2.remote.coroutines/Session.serverTunnel.<get-serverTunnel>|<get-serverTunnel>(){}[0]

    final var internalConnection // ch.softappeal.yass2.remote.coroutines/Session.internalConnection|{}internalConnection[0]
        final fun <get-internalConnection>(): #A // ch.softappeal.yass2.remote.coroutines/Session.internalConnection.<get-internalConnection>|<get-internalConnection>(){}[0]
        final fun <set-internalConnection>(#A) // ch.softappeal.yass2.remote.coroutines/Session.internalConnection.<set-internalConnection>|<set-internalConnection>(1:0){}[0]

    final suspend fun close() // ch.softappeal.yass2.remote.coroutines/Session.close|close(){}[0]
    final suspend fun close(kotlin/Exception) // ch.softappeal.yass2.remote.coroutines/Session.close|close(kotlin.Exception){}[0]
    final suspend fun implReceived(ch.softappeal.yass2.remote.coroutines/Packet?) // ch.softappeal.yass2.remote.coroutines/Session.implReceived|implReceived(ch.softappeal.yass2.remote.coroutines.Packet?){}[0]
    final suspend fun isClosed(): kotlin/Boolean // ch.softappeal.yass2.remote.coroutines/Session.isClosed|isClosed(){}[0]
    open fun opened() // ch.softappeal.yass2.remote.coroutines/Session.opened|opened(){}[0]
    open suspend fun closed(kotlin/Exception?) // ch.softappeal.yass2.remote.coroutines/Session.closed|closed(kotlin.Exception?){}[0]
}

final class ch.softappeal.yass2.remote.coroutines/Packet { // ch.softappeal.yass2.remote.coroutines/Packet|null[0]
    constructor <init>(kotlin/Int, ch.softappeal.yass2.remote/Message) // ch.softappeal.yass2.remote.coroutines/Packet.<init>|<init>(kotlin.Int;ch.softappeal.yass2.remote.Message){}[0]

    final val message // ch.softappeal.yass2.remote.coroutines/Packet.message|{}message[0]
        final fun <get-message>(): ch.softappeal.yass2.remote/Message // ch.softappeal.yass2.remote.coroutines/Packet.message.<get-message>|<get-message>(){}[0]
    final val requestNumber // ch.softappeal.yass2.remote.coroutines/Packet.requestNumber|{}requestNumber[0]
        final fun <get-requestNumber>(): kotlin/Int // ch.softappeal.yass2.remote.coroutines/Packet.requestNumber.<get-requestNumber>|<get-requestNumber>(){}[0]
}

final fun <#A: ch.softappeal.yass2.remote.coroutines/Connection> (#A).ch.softappeal.yass2.remote.coroutines/createSession(kotlin/Function0<ch.softappeal.yass2.remote.coroutines/Session<#A>>): ch.softappeal.yass2.remote.coroutines/Session<#A> // ch.softappeal.yass2.remote.coroutines/createSession|createSession@0:0(kotlin.Function0<ch.softappeal.yass2.remote.coroutines.Session<0:0>>){0ยง<ch.softappeal.yass2.remote.coroutines.Connection>}[0]
final fun <#A: ch.softappeal.yass2.remote.coroutines/Connection> (kotlinx.coroutines/CoroutineScope).ch.softappeal.yass2.remote.coroutines/connect(kotlin/Function0<ch.softappeal.yass2.remote.coroutines/Session<#A>>, kotlin/Long = ..., kotlin.coroutines/SuspendFunction1<kotlin/Function0<ch.softappeal.yass2.remote.coroutines/Session<#A>>, kotlin/Unit>): kotlinx.coroutines/Job // ch.softappeal.yass2.remote.coroutines/connect|connect@kotlinx.coroutines.CoroutineScope(kotlin.Function0<ch.softappeal.yass2.remote.coroutines.Session<0:0>>;kotlin.Long;kotlin.coroutines.SuspendFunction1<kotlin.Function0<ch.softappeal.yass2.remote.coroutines.Session<0:0>>,kotlin.Unit>){0ยง<ch.softappeal.yass2.remote.coroutines.Connection>}[0]
final fun <#A: ch.softappeal.yass2.remote.coroutines/Connection> (kotlinx.coroutines/CoroutineScope).ch.softappeal.yass2.remote.coroutines/watch(ch.softappeal.yass2.remote.coroutines/Session<#A>, kotlin/Long = ..., kotlin/Long = ..., kotlin.coroutines/SuspendFunction0<kotlin/Unit>): kotlinx.coroutines/Job // ch.softappeal.yass2.remote.coroutines/watch|watch@kotlinx.coroutines.CoroutineScope(ch.softappeal.yass2.remote.coroutines.Session<0:0>;kotlin.Long;kotlin.Long;kotlin.coroutines.SuspendFunction0<kotlin.Unit>){0ยง<ch.softappeal.yass2.remote.coroutines.Connection>}[0]
final suspend fun <#A: ch.softappeal.yass2.remote.coroutines/Connection> (#A).ch.softappeal.yass2.remote.coroutines/receiveLoop(kotlin/Function0<ch.softappeal.yass2.remote.coroutines/Session<#A>>, kotlin.coroutines/SuspendFunction0<ch.softappeal.yass2.remote.coroutines/Packet?>) // ch.softappeal.yass2.remote.coroutines/receiveLoop|receiveLoop@0:0(kotlin.Function0<ch.softappeal.yass2.remote.coroutines.Session<0:0>>;kotlin.coroutines.SuspendFunction0<ch.softappeal.yass2.remote.coroutines.Packet?>){0ยง<ch.softappeal.yass2.remote.coroutines.Connection>}[0]
